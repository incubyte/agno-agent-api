#!/usr/bin/env python3\n\"\"\"\nQuick test script to verify that the new agents are working correctly.\nRun this after seeding the database to test the implementation.\n\"\"\"\n\nimport os\nimport sys\nimport requests\nimport json\nfrom datetime import datetime\n\n# Add project root to path\nproject_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nsys.path.insert(0, project_root)\n\nBASE_URL = \"http://localhost:8000\"\n\ndef test_agent_endpoints():\n    \"\"\"Test that all agent endpoints are working\"\"\"\n    print(\"🧪 Testing Agent API Endpoints\")\n    print(\"=\" * 40)\n    \n    try:\n        # Test 1: Get all agents\n        print(\"\\n1. Testing GET /agents...\")\n        response = requests.get(f\"{BASE_URL}/agents\")\n        if response.status_code == 200:\n            agents = response.json()\n            print(f\"   ✅ Success: Found {len(agents)} agents\")\n            \n            # Check if our new agents are present\n            agent_slugs = [agent['slug'] for agent in agents]\n            new_agents = ['website-audit', 'seo-audit', 'marketing-copy']\n            \n            for slug in new_agents:\n                if slug in agent_slugs:\n                    print(f\"   ✅ {slug}: Present\")\n                else:\n                    print(f\"   ❌ {slug}: Missing\")\n        else:\n            print(f\"   ❌ Failed: {response.status_code} - {response.text}\")\n            \n    except requests.exceptions.ConnectionError:\n        print(\"   ❌ Connection failed - Is the server running?\")\n        print(\"      Start server with: python run_server.py\")\n        return False\n    except Exception as e:\n        print(f\"   ❌ Error: {e}\")\n        return False\n        \n    # Test 2: Get individual agents by slug\n    new_agents = [\n        ('website-audit', 'Website Performance Auditor'),\n        ('seo-audit', 'SEO Auditor Agent'), \n        ('marketing-copy', 'Marketing Copywriter Agent')\n    ]\n    \n    print(\"\\n2. Testing individual agent endpoints...\")\n    for slug, expected_name in new_agents:\n        try:\n            response = requests.get(f\"{BASE_URL}/agents/slug/{slug}\")\n            if response.status_code == 200:\n                agent = response.json()\n                if agent['name'] == expected_name:\n                    print(f\"   ✅ {slug}: Correct name and data\")\n                else:\n                    print(f\"   ⚠️ {slug}: Name mismatch - got '{agent['name']}'\")\n            else:\n                print(f\"   ❌ {slug}: Failed {response.status_code}\")\n        except Exception as e:\n            print(f\"   ❌ {slug}: Error - {e}\")\n            \n    # Test 3: Agent count\n    print(\"\\n3. Testing agent count...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/agents/count\")\n        if response.status_code == 200:\n            count_data = response.json()\n            count = count_data.get('count', 0)\n            print(f\"   ✅ Total agents: {count}\")\n            if count >= 11:  # Should have at least 11 with our new agents\n                print(f\"   ✅ Count looks good (expected 11+)\")\n            else:\n                print(f\"   ⚠️ Count seems low (expected 11+)\")\n        else:\n            print(f\"   ❌ Failed: {response.status_code}\")\n    except Exception as e:\n        print(f\"   ❌ Error: {e}\")\n        \n    return True\n\ndef test_agent_factory():\n    \"\"\"Test that AgentFactory can create the new agents\"\"\"\n    print(\"\\n🏭 Testing Agent Factory\")\n    print(\"=\" * 30)\n    \n    try:\n        from app.agents.agent_factory import AgentFactory\n        from app.agents.enum.agent_enum import AgentType\n        \n        test_agents = [\n            (AgentType.WEBSITE_PERFORMANCE_AUDITOR, \"WebsitePerformanceAuditor\"),\n            (AgentType.SEO_AUDIT, \"SEOAuditorAgent\"),\n            (AgentType.MARKETING_COPYWRITER_AGENT, \"MarketingCopywriterAgent\")\n        ]\n        \n        for agent_type, expected_class in test_agents:\n            try:\n                agent = AgentFactory.get_agent(agent_type)\n                actual_class = agent.__class__.__name__\n                \n                if actual_class == expected_class:\n                    print(f\"   ✅ {agent_type.value}: {actual_class}\")\n                    \n                    # Test that the agent has required attributes\n                    if hasattr(agent, 'get_response'):\n                        print(f\"      ✅ Has get_response method\")\n                    else:\n                        print(f\"      ❌ Missing get_response method\")\n                        \n                else:\n                    print(f\"   ❌ {agent_type.value}: Expected {expected_class}, got {actual_class}\")\n                    \n            except Exception as e:\n                print(f\"   ❌ {agent_type.value}: Error - {e}\")\n                \n    except ImportError as e:\n        print(f\"   ❌ Import error: {e}\")\n        return False\n    except Exception as e:\n        print(f\"   ❌ Error: {e}\")\n        return False\n        \n    return True\n\ndef test_prompts():\n    \"\"\"Test that prompts are configured correctly\"\"\"\n    print(\"\\n💬 Testing Agent Prompts\")\n    print(\"=\" * 30)\n    \n    try:\n        from app.agents.agent_prompt_repository import agent_prompt_repository\n        from app.agents.enum.agent_enum import AgentType\n        \n        test_agents = [\n            AgentType.WEBSITE_PERFORMANCE_AUDITOR,\n            AgentType.SEO_AUDIT,\n            AgentType.MARKETING_COPYWRITER_AGENT\n        ]\n        \n        for agent_type in test_agents:\n            if agent_type in agent_prompt_repository:\n                prompt = agent_prompt_repository[agent_type]\n                print(f\"   ✅ {agent_type.value}: {len(prompt)} characters\")\n                if len(prompt) > 50:  # Reasonable prompt length\n                    print(f\"      ✅ Prompt length looks good\")\n                else:\n                    print(f\"      ⚠️ Prompt seems short\")\n            else:\n                print(f\"   ❌ {agent_type.value}: No prompt found\")\n                \n    except ImportError as e:\n        print(f\"   ❌ Import error: {e}\")\n        return False\n    except Exception as e:\n        print(f\"   ❌ Error: {e}\")\n        return False\n        \n    return True\n\ndef generate_test_report():\n    \"\"\"Generate a summary test report\"\"\"\n    print(\"\\n📊 Test Summary\")\n    print(\"=\" * 20)\n    \n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(f\"Test completed at: {timestamp}\")\n    print(\"\\nIf all tests passed:\")\n    print(\"✅ Your new SEO & Marketing agents are working correctly!\")\n    print(\"\\nNext steps:\")\n    print(\"1. Test via API calls or frontend\")\n    print(\"2. Run full test suite: pytest tests/\")\n    print(\"3. Deploy to production when ready\")\n    \n    print(\"\\nIf tests failed:\")\n    print(\"❌ Check the error messages above\")\n    print(\"1. Ensure server is running: python run_server.py\")\n    print(\"2. Run seeding script: python seed_new_agents.py\")\n    print(\"3. Check import paths and dependencies\")\n\ndef main():\n    \"\"\"Main test function\"\"\"\n    print(\"🧪 SEO & Marketing Agents - Integration Test\")\n    print(\"=\" * 50)\n    print(f\"Testing against: {BASE_URL}\")\n    \n    # Run all tests\n    api_success = test_agent_endpoints()\n    factory_success = test_agent_factory()\n    prompt_success = test_prompts()\n    \n    # Generate report\n    generate_test_report()\n    \n    # Overall result\n    if api_success and factory_success and prompt_success:\n        print(\"\\n🎉 All tests passed! Agents are ready to use.\")\n        return 0\n    else:\n        print(\"\\n⚠️ Some tests failed. Check the output above.\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit_code = main()\n    sys.exit(exit_code)\n